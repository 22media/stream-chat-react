"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var prop_types_1 = __importDefault(require("prop-types"));
/**
 * AttachmentActions - The actions you can take on an attachment
 *
 * @example ./docs/AttachmentActions.md
 * @extends PureComponent
 */
var AttachmentActions = /** @class */ (function (_super) {
    __extends(AttachmentActions, _super);
    function AttachmentActions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AttachmentActions.prototype.render = function () {
        var _this = this;
        var _a = this.props, text = _a.text, id = _a.id, actions = _a.actions, actionHandler = _a.actionHandler;
        return (react_1.default.createElement("div", { className: "str-chat__message-attachment-actions" },
            react_1.default.createElement("form", { className: "str-chat__message-attachment-actions-form" },
                react_1.default.createElement("span", { key: 0 }, text),
                actions
                    ? actions.map(function (action) { return (react_1.default.createElement("button", { className: "str-chat__message-attachment-actions-button str-chat__message-attachment-actions-button--" + action.style, key: id + "-" + action.value, "data-value": action.value, onClick: actionHandler.bind(_this, action.name, action.value) }, action.text)); })
                    : null)));
    };
    AttachmentActions.propTypes = {
        /** Unique id for action button key. Key is generated by concatenating this id with action value - {`${id}-${action.value}`} */
        id: prop_types_1.default.string.isRequired,
        /** The text for the form input */
        text: prop_types_1.default.string,
        /** A list of actions */
        actions: prop_types_1.default.array.isRequired,
        /**
         *
         * Handler for actions. Actions in combination with attachments can be used to build [commands](https://getstream.io/chat/docs/#channel_commands).
         *
         * @param name {string} Name of action
         * @param value {string} Value of action
         * @param event Dom event that triggered this handler
         */
        actionHandler: prop_types_1.default.func.isRequired,
    };
    return AttachmentActions;
}(react_1.default.PureComponent));
exports.AttachmentActions = AttachmentActions;
